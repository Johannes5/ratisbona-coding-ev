// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2uxAq5bBM7QPimw2pErK3f
// Component: _oexzkgK5J
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 5K3KabDCBP9/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_ratisbona_coding_e_v.module.css"; // plasmic-import: 2uxAq5bBM7QPimw2pErK3f/projectcss
import sty from "./PlasmicProjectCard.module.css"; // plasmic-import: _oexzkgK5J/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: YZAtybNzSk5/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: lBZX9HlNj7W/icon

export type PlasmicProjectCard__VariantMembers = {};

export type PlasmicProjectCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicProjectCard__VariantsArgs;
export const PlasmicProjectCard__VariantProps = new Array<VariantPropType>();

export type PlasmicProjectCard__ArgsType = {
  eventName?: React.ReactNode;
  eventBrand?: React.ReactNode;
  eventDescription?: React.ReactNode;
  eventImage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProjectCard__ArgsType;
export const PlasmicProjectCard__ArgProps = new Array<ArgPropType>(
  "eventName",
  "eventBrand",
  "eventDescription",
  "eventImage"
);

export type PlasmicProjectCard__OverridesType = {
  root?: p.Flex<"div">;
  headlineText?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultProjectCardProps {
  eventName?: React.ReactNode;
  eventBrand?: React.ReactNode;
  eventDescription?: React.ReactNode;
  eventImage?: React.ReactNode;
  className?: string;
}

function PlasmicProjectCard__RenderFunc(props: {
  variants: PlasmicProjectCard__VariantsArgs;
  args: PlasmicProjectCard__ArgsType;
  overrides: PlasmicProjectCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__yFiAe)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"50%" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/ratisbona_coding_e_v/images/hackaburg1Png.png",
              fullWidth: 467,
              fullHeight: 683,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.eventImage
      })}

      <div
        data-plasmic-name={"headlineText"}
        data-plasmic-override={overrides.headlineText}
        className={classNames(projectcss.all, sty.headlineText)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___8E4VF)}>
          {p.renderPlasmicSlot({
            defaultContents: "Hackaburg",
            value: args.eventBrand,
            className: classNames(sty.slotTargetEventBrand)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__ct8V3)}>
          {p.renderPlasmicSlot({
            defaultContents: "School",
            value: args.eventName,
            className: classNames(sty.slotTargetEventName)
          })}
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___6UnbX)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "Das Event das mit dem alles begann. Der Hackthon ist immer noch unser wichtigstes Event und das Zugpferd f√ºr den Verein.",
          value: args.eventDescription,
          className: classNames(sty.slotTargetEventDescription)
        })}
      </div>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
      >
        {"Mehr dazu"}
      </Button>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headlineText", "button"],
  headlineText: ["headlineText"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headlineText: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjectCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicProjectCard__VariantsArgs;
  args?: PlasmicProjectCard__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicProjectCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicProjectCard__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjectCard__ArgProps,
          internalVariantPropNames: PlasmicProjectCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProjectCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectCard";
  } else {
    func.displayName = `PlasmicProjectCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectCard = Object.assign(
  // Top-level PlasmicProjectCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headlineText: makeNodeComponent("headlineText"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicProjectCard
    internalVariantProps: PlasmicProjectCard__VariantProps,
    internalArgProps: PlasmicProjectCard__ArgProps
  }
);

export default PlasmicProjectCard;
/* prettier-ignore-end */
