// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2uxAq5bBM7QPimw2pErK3f
// Component: 6SRNDKk9BG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsheKioeNKluyfQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HEKioeNKluyfQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_ratisbona_coding_e_v.module.css"; // plasmic-import: 2uxAq5bBM7QPimw2pErK3f/projectcss
import sty from "./PlasmicCta.module.css"; // plasmic-import: 6SRNDKk9BG/css

import ArrowForward24RegularIcon from "./icons/PlasmicIcon__ArrowForward24Regular"; // plasmic-import: _0z1TQ2YHb/icon

export type PlasmicCta__VariantMembers = {};

export type PlasmicCta__VariantsArgs = {};
type VariantPropType = keyof PlasmicCta__VariantsArgs;
export const PlasmicCta__VariantProps = new Array<VariantPropType>();

export type PlasmicCta__ArgsType = {};
type ArgPropType = keyof PlasmicCta__ArgsType;
export const PlasmicCta__ArgProps = new Array<ArgPropType>();

export type PlasmicCta__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
  span?: p.Flex<"span">;
  whiteButton?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultCtaProps {
  className?: string;
}

function PlasmicCta__RenderFunc(props: {
  variants: PlasmicCta__VariantsArgs;
  args: PlasmicCta__ArgsType;
  overrides: PlasmicCta__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsheKioeNKluyfQ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        "ctaArea" as const
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly") ? (
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"Du möchtest dich uns "}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"anschließen? ·"}
                </span>
                <React.Fragment>{"  "}</React.Fragment>
                {
                  <span
                    data-plasmic-name={"span"}
                    data-plasmic-override={overrides.span}
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "oder fragst dich wie du uns unterstützen kannst?"
                      : "oder fragst dich wie du uns unterstützen kannst?"}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            ) : (
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"Du möchtest dich uns "}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"anschließen? ·"}
                </span>
                <React.Fragment>{"  "}</React.Fragment>
                {
                  <span
                    data-plasmic-name={"span"}
                    data-plasmic-override={overrides.span}
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "oder fragst dich wie du uns unterstützen kannst?"
                      : "oder fragst dich wie du uns unterstützen kannst?"}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            )}
          </div>

          <div
            data-plasmic-name={"whiteButton"}
            data-plasmic-override={overrides.whiteButton}
            className={classNames(
              projectcss.all,
              sty.whiteButton,
              "whiteButton" as const
            )}
          >
            <ArrowForward24RegularIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text", "span", "whiteButton", "svg"],
  freeBox: ["freeBox", "text", "span", "whiteButton", "svg"],
  text: ["text", "span"],
  span: ["span"],
  whiteButton: ["whiteButton", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
  span: "span";
  whiteButton: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicCta__VariantsArgs;
  args?: PlasmicCta__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicCta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicCta__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCta__ArgProps,
          internalVariantPropNames: PlasmicCta__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCta";
  } else {
    func.displayName = `PlasmicCta.${nodeName}`;
  }
  return func;
}

export const PlasmicCta = Object.assign(
  // Top-level PlasmicCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    span: makeNodeComponent("span"),
    whiteButton: makeNodeComponent("whiteButton"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicCta
    internalVariantProps: PlasmicCta__VariantProps,
    internalArgProps: PlasmicCta__ArgProps
  }
);

export default PlasmicCta;
/* prettier-ignore-end */
