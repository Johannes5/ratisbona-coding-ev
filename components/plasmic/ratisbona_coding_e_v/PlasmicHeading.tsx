// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2uxAq5bBM7QPimw2pErK3f
// Component: X6AOmIrJmE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_ratisbona_coding_e_v.module.css"; // plasmic-import: 2uxAq5bBM7QPimw2pErK3f/projectcss
import sty from "./PlasmicHeading.module.css"; // plasmic-import: X6AOmIrJmE/css

export type PlasmicHeading__VariantMembers = {};

export type PlasmicHeading__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeading__VariantsArgs;
export const PlasmicHeading__VariantProps = new Array<VariantPropType>();

export type PlasmicHeading__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeading__ArgsType;
export const PlasmicHeading__ArgProps = new Array<ArgPropType>("children");

export type PlasmicHeading__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  whiteDivider?: p.Flex<"div">;
};

export interface DefaultHeadingProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicHeading__RenderFunc(props: {
  variants: PlasmicHeading__VariantsArgs;
  args: PlasmicHeading__ArgsType;
  overrides: PlasmicHeading__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Wie du uns underst√ºtzen kannst",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>

      <div
        data-plasmic-name={"whiteDivider"}
        data-plasmic-override={overrides.whiteDivider}
        className={classNames(projectcss.all, sty.whiteDivider)}
      />
    </p.Stack>
  ) : null) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "whiteDivider"],
  freeBox: ["freeBox"],
  whiteDivider: ["whiteDivider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  whiteDivider: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeading__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHeading__VariantsArgs;
  args?: PlasmicHeading__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHeading__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHeading__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeading__ArgProps,
          internalVariantPropNames: PlasmicHeading__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeading__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeading";
  } else {
    func.displayName = `PlasmicHeading.${nodeName}`;
  }
  return func;
}

export const PlasmicHeading = Object.assign(
  // Top-level PlasmicHeading renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    whiteDivider: makeNodeComponent("whiteDivider"),

    // Metadata about props expected for PlasmicHeading
    internalVariantProps: PlasmicHeading__VariantProps,
    internalArgProps: PlasmicHeading__ArgProps
  }
);

export default PlasmicHeading;
/* prettier-ignore-end */
