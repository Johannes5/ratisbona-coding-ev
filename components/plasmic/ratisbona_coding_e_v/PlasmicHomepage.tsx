// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2uxAq5bBM7QPimw2pErK3f
// Component: _-xn9pVSHCvw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import EventCard from "../../EventCard"; // plasmic-import: JeGt_Q8XkwU/component
import EventBadge from "../../EventBadge"; // plasmic-import: UZdB-6Pp6r/component
import Cta from "../../Cta"; // plasmic-import: 6SRNDKk9BG/component

import { useScreenVariants as useScreenVariantsheKioeNKluyfQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HEKioeNKluyfQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_ratisbona_coding_e_v.module.css"; // plasmic-import: 2uxAq5bBM7QPimw2pErK3f/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: _-xn9pVSHCvw/css

import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: Znyuo0YrdF/icon
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: 8k_j5ssWFG/icon
import TextIcon from "./icons/PlasmicIcon__Text"; // plasmic-import: mqGymOvZ9x/icon
import ArrowForward24RegularIcon from "./icons/PlasmicIcon__ArrowForward24Regular"; // plasmic-import: _0z1TQ2YHb/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  bg?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  ratisbonaCodingEVLanding?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  ratisbonaCodingEVLogo?: p.Flex<"div">;
  group?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  headerBlack011?: p.Flex<"div">;
  span?: p.Flex<"span">;
  rotatingHeadlineText?: p.Flex<"div">;
  intro?: p.Flex<"div">;
  top?: p.Flex<"div">;
  topCard?: p.Flex<"div">;
  combinedExpertise?: p.Flex<"div">;
  codeCard?: p.Flex<"div">;
  bottomCard?: p.Flex<"div">;
  eventList?: p.Flex<"div">;
  list?: p.Flex<"div">;
  deggingerEventCard?: p.Flex<typeof EventCard>;
  title?: p.Flex<"div">;
  grillPartyEventCard?: p.Flex<typeof EventCard>;
  title3?: p.Flex<"div">;
  ort5?: p.Flex<"div">;
  bungabungaEventCard?: p.Flex<typeof EventCard>;
  title2?: p.Flex<"div">;
  ort4?: p.Flex<"div">;
  hackaburgEventCard?: p.Flex<typeof EventCard>;
  lockdownCard?: p.Flex<"div">;
  wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen?: p.Flex<"div">;
  gallery?: p.Flex<"div">;
  ctaSection?: p.Flex<"div">;
  cta?: p.Flex<typeof Cta>;
  figmaPaste?: p.Flex<"div">;
  oderSendeUnsEineMail?: p.Flex<"div">;
  sendeUnsEineMail?: p.Flex<"a"> & Partial<LinkProps>;
  ctaSection2?: p.Flex<"div">;
  bigCta?: p.Flex<"div">;
  whiteButton?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsheKioeNKluyfQ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"bg"}
            data-plasmic-override={overrides.bg}
            className={classNames(projectcss.all, sty.bg)}
          >
            {true ? (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              />
            ) : null}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"ratisbonaCodingEVLanding"}
            data-plasmic-override={overrides.ratisbonaCodingEVLanding}
            hasGap={true}
            className={classNames(projectcss.all, sty.ratisbonaCodingEvLanding)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              hasGap={true}
              className={classNames(projectcss.all, sty.hero)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"ratisbonaCodingEVLogo"}
                  data-plasmic-override={overrides.ratisbonaCodingEVLogo}
                  className={classNames(
                    projectcss.all,
                    sty.ratisbonaCodingEvLogo
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"group"}
                    data-plasmic-override={overrides.group}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.group)}
                  >
                    <div
                      data-plasmic-name={"logo"}
                      data-plasmic-override={overrides.logo}
                      className={classNames(projectcss.all, sty.logo)}
                    >
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__lbDwp)}
                        role={"img"}
                      />

                      <Group2Icon
                        className={classNames(projectcss.all, sty.svg__xa9W)}
                        role={"img"}
                      />
                    </div>

                    <TextIcon
                      className={classNames(projectcss.all, sty.svg__cf0D2)}
                      role={"img"}
                    />
                  </p.Stack>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"headerBlack011"}
                  data-plasmic-override={overrides.headerBlack011}
                  className={classNames(projectcss.all, sty.headerBlack011)}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nCdXg)}
                  displayHeight={"81px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/ratisbona_coding_e_v/images/image2.png",
                    fullWidth: 652,
                    fullHeight: 258,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kcCzt)}
                  displayHeight={"429px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src:
                      "/plasmic/ratisbona_coding_e_v/images/headerBlack011.png",
                    fullWidth: 1042,
                    fullHeight: 1042,
                    aspectRatio: undefined
                  }}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___820ZB
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Du bist "}</React.Fragment>
                  {
                    <span
                      data-plasmic-name={"span"}
                      data-plasmic-override={overrides.span}
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.span
                      )}
                    >
                      {"Coder"}
                    </span>
                  }
                  <React.Fragment>
                    {" und wohnst nicht weit von Regensburg?"}
                  </React.Fragment>
                </React.Fragment>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___98DCj
                )}
              >
                {"Mit uns kannst du:"}
              </div>

              <div
                data-plasmic-name={"rotatingHeadlineText"}
                data-plasmic-override={overrides.rotatingHeadlineText}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.rotatingHeadlineText
                )}
              >
                {"Co-worken"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"intro"}
              data-plasmic-override={overrides.intro}
              hasGap={true}
              className={classNames(projectcss.all, sty.intro)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"top"}
                data-plasmic-override={overrides.top}
                hasGap={true}
                className={classNames(projectcss.all, sty.top)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"topCard"}
                  data-plasmic-override={overrides.topCard}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.topCard)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4TvuY
                    )}
                  >
                    {"Als Coder haben wir praktisch gesehen Superkräfte."}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bn5Wd
                    )}
                  >
                    {"Und mit großer Kraft kommt große…"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uIts8
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "…naja, so ernst ist es jetzt dann auch nicht. \nAber wir haben definitiv kein Interesse daran unser Privileg für uns zu behalten und andere zurück zu lassen. \nDaher wollen wir dafür sogen dass Menschen in unserer Region wissen was möglich ist und ihnen unsere Fähigkeiten zugänglich und schmackhaft machen.\nDas erreichen wir zum Beispiel indem wir Events an Schulen organisieren. Oder einen Rahmen und ein Publikum für Vorträge schaffen."
                      : "…naja, so ernst ist es jetzt dann auch nicht. \nAber wir haben definitiv kein Interesse daran unser Privileg für uns zu behalten und andere zurück zu lassen. \nDaher wollen wir dafür sorgen, dass Menschen in unserer Region wissen was möglich ist und ihnen unsere Fähigkeiten zugänglich und schmackhaft machen.\nDas erreichen wir zum Beispiel, indem wir Events an Schulen organisieren. Oder einen Rahmen und ein Publikum für Vorträge schaffen."}
                  </div>
                </p.Stack>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"combinedExpertise"}
                  data-plasmic-override={overrides.combinedExpertise}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.combinedExpertise)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"codeCard"}
                    data-plasmic-override={overrides.codeCard}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.codeCard)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rRPuK
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FA9065" }}
                          >
                            {"let"}
                          </span>
                          <React.Fragment>{"  "}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#DADADA" }}
                          >
                            {"combinedExpertise "}
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#DADADA" }}
                          >
                            {"="}
                          </span>
                          <React.Fragment> </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#4286D5" }}
                          >
                            {"„2“"}
                          </span>
                          <React.Fragment> </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#DADADA" }}
                          >
                            {"+"}
                          </span>
                          <React.Fragment> </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#4286D5" }}
                          >
                            {"„2“ "}
                          </span>
                          <React.Fragment>{"// = „22“"}</React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FA9065" }}
                          >
                            {"let"}
                          </span>
                          <React.Fragment>{"  "}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#DADADA" }}
                          >
                            {"combinedExpertise ="}
                          </span>
                          <React.Fragment> </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#4286D5" }}
                          >
                            {"„2“"}
                          </span>
                          <React.Fragment> </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#DADADA" }}
                          >
                            {"+"}
                          </span>
                          <React.Fragment> </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#4286D5" }}
                          >
                            {"„2“ "}
                          </span>
                          <React.Fragment>{"// = „22“"}</React.Fragment>
                        </React.Fragment>
                      )}
                    </div>
                  </p.Stack>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__x7T57)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("177px" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"821.728px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/ratisbona_coding_e_v/images/graph.svg",
                      fullWidth: 821.728,
                      fullHeight: 255.684,
                      aspectRatio: 3.176923
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"bottomCard"}
                    data-plasmic-override={overrides.bottomCard}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.bottomCard)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w0Z0B
                      )}
                    >
                      {
                        "Kaum ein Handwerk ist so tief und breit wie das Entwickeln von Software.\nUnd kaum eine Disziplin profitiert so leicht von Automatisierung und Wiederverwendbarkeit."
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ya6Th
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#6522B9", fontWeight: 700 }}
                        >
                          {"Abstraktion"}
                        </span>
                        <React.Fragment>
                          {"  ist schließlich der Name des Programms."}
                        </React.Fragment>
                      </React.Fragment>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__akDnB
                      )}
                    >
                      {
                        "Wenn du also ein Problem, das bestimmt schon mehrfach gelöst wurde, nicht alleine anpacken willst - oder die Wahrscheinlichkeit erhöhen möchtest auf Wissen zu stoßen von dem doch noch nicht weißt, dass du es noch nicht weißt"
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pxsmV
                      )}
                    >
                      {
                        "-> dann kannst du zB. zu unseren regelmäßigen Co-Working Sessions kommen"
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dLopw
                      )}
                    >
                      {
                        "Auch tangentiale Skill-Sets wie Online-Marketing und Design werden bei uns gerne gesehen!"
                      }
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"eventList"}
              data-plasmic-override={overrides.eventList}
              hasGap={true}
              className={classNames(projectcss.all, sty.eventList)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jiSzN
                )}
              >
                {"Unsere kommenden Events:"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"list"}
                data-plasmic-override={overrides.list}
                hasGap={true}
                className={classNames(projectcss.all, sty.list)}
              >
                <EventCard
                  data-plasmic-name={"deggingerEventCard"}
                  data-plasmic-override={overrides.deggingerEventCard}
                  className={classNames(
                    "__wab_instance",
                    sty.deggingerEventCard
                  )}
                  hideImage={true}
                  lightBackground={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : undefined
                  }
                  ort={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xAo3
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <React.Fragment>
                            {"Degginger - Wahlenstr. 17, Regensburg    \n\n"}
                          </React.Fragment>
                          {
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link__pzH3A
                              )}
                              component={Link}
                              href={
                                "https://duckduckgo.com/?q=franz-mayer-str.+1+regensburg&atb=v314-1&ia=web&iaxm=maps" as const
                              }
                              platform={"nextjs"}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? " Karte ↪ "
                                : " Karte ↪ "}
                            </p.PlasmicLink>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>
                            {"Degginger - Wahlenstr. 17, Regensburg    "}
                          </React.Fragment>
                          {
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link__pzH3A
                              )}
                              component={Link}
                              href={
                                "https://duckduckgo.com/?q=franz-mayer-str.+1+regensburg&atb=v314-1&ia=web&iaxm=maps" as const
                              }
                              platform={"nextjs"}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? " Karte ↪ "
                                : " Karte ↪ "}
                            </p.PlasmicLink>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      )}
                    </div>
                  }
                  slot={
                    <EventBadge
                      className={classNames(
                        "__wab_instance",
                        sty.eventBadge__tv0Cq
                      )}
                      color={"blue" as const}
                    />
                  }
                  title={
                    <div
                      data-plasmic-name={"title"}
                      data-plasmic-override={overrides.title}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title
                      )}
                    >
                      {"Co-Working im Degginger ⌨️"}
                    </div>
                  }
                >
                  {
                    "Wir mieten Räumlichkeiten im Degginer um die Matrix zu entschlüsseln. Oder woran auch immer du gerade arbeiten möchtest. Gemeinsam ists einfach besser."
                  }
                </EventCard>

                <EventCard
                  data-plasmic-name={"grillPartyEventCard"}
                  data-plasmic-override={overrides.grillPartyEventCard}
                  className={classNames(
                    "__wab_instance",
                    sty.grillPartyEventCard
                  )}
                  hideImage={true}
                  lightBackground={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : undefined
                  }
                  ort={
                    <div
                      data-plasmic-name={"ort5"}
                      data-plasmic-override={overrides.ort5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.ort5
                      )}
                    >
                      {"Beim Markus"}
                    </div>
                  }
                  slot={
                    <EventBadge
                      className={classNames(
                        "__wab_instance",
                        sty.eventBadge__fj2Di
                      )}
                      color={"orange" as const}
                    />
                  }
                  title={
                    <div
                      data-plasmic-name={"title3"}
                      data-plasmic-override={overrides.title3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title3
                      )}
                    >
                      {"Grill Party 🍗 "}
                    </div>
                  }
                >
                  {"BYOB (Bring your on Beef)"}
                </EventCard>

                <EventCard
                  data-plasmic-name={"bungabungaEventCard"}
                  data-plasmic-override={overrides.bungabungaEventCard}
                  className={classNames(
                    "__wab_instance",
                    sty.bungabungaEventCard
                  )}
                  hideImage={true}
                  lightBackground={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : undefined
                  }
                  ort={
                    <div
                      data-plasmic-name={"ort4"}
                      data-plasmic-override={overrides.ort4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.ort4
                      )}
                    >
                      {"Disclosed"}
                    </div>
                  }
                  slot={
                    <EventBadge
                      className={classNames(
                        "__wab_instance",
                        sty.eventBadge___2CmXd
                      )}
                      color={"red" as const}
                    />
                  }
                  title={
                    <div
                      data-plasmic-name={"title2"}
                      data-plasmic-override={overrides.title2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title2
                      )}
                    >
                      {"BUNGABUNGA 🍾"}
                    </div>
                  }
                >
                  {"..."}
                </EventCard>

                <EventCard
                  data-plasmic-name={"hackaburgEventCard"}
                  data-plasmic-override={overrides.hackaburgEventCard}
                  className={classNames(
                    "__wab_instance",
                    sty.hackaburgEventCard
                  )}
                  lightBackground={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : undefined
                  }
                  ort={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fvwcI
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Techbase Franz-Mayer-Str. 1   \n"}
                        </React.Fragment>
                        {
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link___32Gs
                            )}
                            component={Link}
                            href={
                              "https://duckduckgo.com/?q=franz-mayer-str.+1+regensburg&atb=v314-1&ia=web&iaxm=maps" as const
                            }
                            platform={"nextjs"}
                          >
                            {"Karte ↪ "}
                          </p.PlasmicLink>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  }
                />
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"lockdownCard"}
              data-plasmic-override={overrides.lockdownCard}
              hasGap={true}
              className={classNames(projectcss.all, sty.lockdownCard)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5PWEb
                )}
              >
                {"Lockdowns? Pff..."}
              </div>

              <div
                data-plasmic-name={
                  "wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen"
                }
                data-plasmic-override={
                  overrides.wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen
                }
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen
                )}
              >
                {
                  "Wenn wieder ein Virus durch die weltweiten Nachrichten-Medien kursiert um uns abzulenken, gefügig zu machen und von einander zu trennen "
                }
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q8HaT
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "-> lassen wir uns nicht davon abhalten Events zu veranstalten und Gutes zu schaffen!\nWenn nötig oder bei schönem Wetter auch gern "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#82BD53" }}
                  >
                    {"Outdoors"}
                  </span>
                  <React.Fragment>{":"}</React.Fragment>
                </React.Fragment>
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"gallery"}
              data-plasmic-override={overrides.gallery}
              className={classNames(projectcss.all, sty.gallery)}
            />

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"ctaSection"}
                data-plasmic-override={overrides.ctaSection}
                className={classNames(projectcss.all, sty.ctaSection)}
              >
                <Cta
                  data-plasmic-name={"cta"}
                  data-plasmic-override={overrides.cta}
                  className={classNames("__wab_instance", sty.cta)}
                />
              </div>
            ) : null}
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"figmaPaste"}
              data-plasmic-override={overrides.figmaPaste}
              className={classNames(projectcss.all, sty.figmaPaste)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"oderSendeUnsEineMail"}
                data-plasmic-override={overrides.oderSendeUnsEineMail}
                hasGap={true}
                className={classNames(projectcss.all, sty.oderSendeUnsEineMail)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xv2S2
                  )}
                >
                  {"oder"}
                </div>

                <p.PlasmicLink
                  data-plasmic-name={"sendeUnsEineMail"}
                  data-plasmic-override={overrides.sendeUnsEineMail}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.sendeUnsEineMail
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"sende uns eine Mail   ✉️ "}
                </p.PlasmicLink>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kTn1W
                  )}
                >
                  {"howdy@ratisbona.ev"}
                </div>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"ctaSection2"}
                  data-plasmic-override={overrides.ctaSection2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.ctaSection2)}
                >
                  <div
                    data-plasmic-name={"bigCta"}
                    data-plasmic-override={overrides.bigCta}
                    className={classNames(projectcss.all, sty.bigCta)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ess1H
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"Du möchtest Mitglied werden?"}
                        </span>
                        <React.Fragment>
                          {
                            "   Oder  fragst dich wie du uns unterstützen kannst?"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>

                    <div
                      data-plasmic-name={"whiteButton"}
                      data-plasmic-override={overrides.whiteButton}
                      className={classNames(projectcss.all, sty.whiteButton)}
                    />

                    <ArrowForward24RegularIcon
                      className={classNames(projectcss.all, sty.svg__iOjeK)}
                      role={"img"}
                    />
                  </div>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "bg",
    "freeBox",
    "ratisbonaCodingEVLanding",
    "hero",
    "ratisbonaCodingEVLogo",
    "group",
    "logo",
    "headerBlack011",
    "span",
    "rotatingHeadlineText",
    "intro",
    "top",
    "topCard",
    "combinedExpertise",
    "codeCard",
    "bottomCard",
    "eventList",
    "list",
    "deggingerEventCard",
    "title",
    "grillPartyEventCard",
    "title3",
    "ort5",
    "bungabungaEventCard",
    "title2",
    "ort4",
    "hackaburgEventCard",
    "lockdownCard",
    "wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen",
    "gallery",
    "ctaSection",
    "cta",
    "figmaPaste",
    "oderSendeUnsEineMail",
    "sendeUnsEineMail",
    "ctaSection2",
    "bigCta",
    "whiteButton"
  ],
  bg: ["bg", "freeBox"],
  freeBox: ["freeBox"],
  ratisbonaCodingEVLanding: [
    "ratisbonaCodingEVLanding",
    "hero",
    "ratisbonaCodingEVLogo",
    "group",
    "logo",
    "headerBlack011",
    "span",
    "rotatingHeadlineText",
    "intro",
    "top",
    "topCard",
    "combinedExpertise",
    "codeCard",
    "bottomCard",
    "eventList",
    "list",
    "deggingerEventCard",
    "title",
    "grillPartyEventCard",
    "title3",
    "ort5",
    "bungabungaEventCard",
    "title2",
    "ort4",
    "hackaburgEventCard",
    "lockdownCard",
    "wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen",
    "gallery",
    "ctaSection",
    "cta"
  ],
  hero: [
    "hero",
    "ratisbonaCodingEVLogo",
    "group",
    "logo",
    "headerBlack011",
    "span",
    "rotatingHeadlineText"
  ],
  ratisbonaCodingEVLogo: ["ratisbonaCodingEVLogo", "group", "logo"],
  group: ["group", "logo"],
  logo: ["logo"],
  headerBlack011: ["headerBlack011"],
  span: ["span"],
  rotatingHeadlineText: ["rotatingHeadlineText"],
  intro: [
    "intro",
    "top",
    "topCard",
    "combinedExpertise",
    "codeCard",
    "bottomCard"
  ],
  top: ["top", "topCard"],
  topCard: ["topCard"],
  combinedExpertise: ["combinedExpertise", "codeCard", "bottomCard"],
  codeCard: ["codeCard"],
  bottomCard: ["bottomCard"],
  eventList: [
    "eventList",
    "list",
    "deggingerEventCard",
    "title",
    "grillPartyEventCard",
    "title3",
    "ort5",
    "bungabungaEventCard",
    "title2",
    "ort4",
    "hackaburgEventCard"
  ],
  list: [
    "list",
    "deggingerEventCard",
    "title",
    "grillPartyEventCard",
    "title3",
    "ort5",
    "bungabungaEventCard",
    "title2",
    "ort4",
    "hackaburgEventCard"
  ],
  deggingerEventCard: ["deggingerEventCard", "title"],
  title: ["title"],
  grillPartyEventCard: ["grillPartyEventCard", "title3", "ort5"],
  title3: ["title3"],
  ort5: ["ort5"],
  bungabungaEventCard: ["bungabungaEventCard", "title2", "ort4"],
  title2: ["title2"],
  ort4: ["ort4"],
  hackaburgEventCard: ["hackaburgEventCard"],
  lockdownCard: [
    "lockdownCard",
    "wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen"
  ],
  wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen: [
    "wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen"
  ],
  gallery: ["gallery"],
  ctaSection: ["ctaSection", "cta"],
  cta: ["cta"],
  figmaPaste: [
    "figmaPaste",
    "oderSendeUnsEineMail",
    "sendeUnsEineMail",
    "ctaSection2",
    "bigCta",
    "whiteButton"
  ],
  oderSendeUnsEineMail: ["oderSendeUnsEineMail", "sendeUnsEineMail"],
  sendeUnsEineMail: ["sendeUnsEineMail"],
  ctaSection2: ["ctaSection2", "bigCta", "whiteButton"],
  bigCta: ["bigCta", "whiteButton"],
  whiteButton: ["whiteButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  bg: "div";
  freeBox: "div";
  ratisbonaCodingEVLanding: "div";
  hero: "div";
  ratisbonaCodingEVLogo: "div";
  group: "div";
  logo: "div";
  headerBlack011: "div";
  span: "span";
  rotatingHeadlineText: "div";
  intro: "div";
  top: "div";
  topCard: "div";
  combinedExpertise: "div";
  codeCard: "div";
  bottomCard: "div";
  eventList: "div";
  list: "div";
  deggingerEventCard: typeof EventCard;
  title: "div";
  grillPartyEventCard: typeof EventCard;
  title3: "div";
  ort5: "div";
  bungabungaEventCard: typeof EventCard;
  title2: "div";
  ort4: "div";
  hackaburgEventCard: typeof EventCard;
  lockdownCard: "div";
  wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen: "div";
  gallery: "div";
  ctaSection: "div";
  cta: typeof Cta;
  figmaPaste: "div";
  oderSendeUnsEineMail: "div";
  sendeUnsEineMail: "a";
  ctaSection2: "div";
  bigCta: "div";
  whiteButton: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs;
  args?: PlasmicHomepage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bg: makeNodeComponent("bg"),
    freeBox: makeNodeComponent("freeBox"),
    ratisbonaCodingEVLanding: makeNodeComponent("ratisbonaCodingEVLanding"),
    hero: makeNodeComponent("hero"),
    ratisbonaCodingEVLogo: makeNodeComponent("ratisbonaCodingEVLogo"),
    group: makeNodeComponent("group"),
    logo: makeNodeComponent("logo"),
    headerBlack011: makeNodeComponent("headerBlack011"),
    span: makeNodeComponent("span"),
    rotatingHeadlineText: makeNodeComponent("rotatingHeadlineText"),
    intro: makeNodeComponent("intro"),
    top: makeNodeComponent("top"),
    topCard: makeNodeComponent("topCard"),
    combinedExpertise: makeNodeComponent("combinedExpertise"),
    codeCard: makeNodeComponent("codeCard"),
    bottomCard: makeNodeComponent("bottomCard"),
    eventList: makeNodeComponent("eventList"),
    list: makeNodeComponent("list"),
    deggingerEventCard: makeNodeComponent("deggingerEventCard"),
    title: makeNodeComponent("title"),
    grillPartyEventCard: makeNodeComponent("grillPartyEventCard"),
    title3: makeNodeComponent("title3"),
    ort5: makeNodeComponent("ort5"),
    bungabungaEventCard: makeNodeComponent("bungabungaEventCard"),
    title2: makeNodeComponent("title2"),
    ort4: makeNodeComponent("ort4"),
    hackaburgEventCard: makeNodeComponent("hackaburgEventCard"),
    lockdownCard: makeNodeComponent("lockdownCard"),
    wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen: makeNodeComponent(
      "wennWiederEinVirusDurchDieWeltweitenMedienKursiertUmUnsAbzulenkenGefugigZuMachenUndVonEinanderZuTrennen"
    ),
    gallery: makeNodeComponent("gallery"),
    ctaSection: makeNodeComponent("ctaSection"),
    cta: makeNodeComponent("cta"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    oderSendeUnsEineMail: makeNodeComponent("oderSendeUnsEineMail"),
    sendeUnsEineMail: makeNodeComponent("sendeUnsEineMail"),
    ctaSection2: makeNodeComponent("ctaSection2"),
    bigCta: makeNodeComponent("bigCta"),
    whiteButton: makeNodeComponent("whiteButton"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
